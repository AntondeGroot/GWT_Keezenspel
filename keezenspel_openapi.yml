openapi: 3.1.0
info:
  title: Keezen Game API
  version: 1.0.0
  description: |
    OpenApi definition for the Keezen board game.
    This API manages players, games, moves, and cards.

servers:
  - url: http://localhost:4200
    description: Local development server

paths:
  /games:
    get:
      summary: List all active games
      description: Get stats like number of players, max nr players, is the game playing.
      operationId: getAllGames
      tags:
        - games
      responses:
        '200':
          description: A list of games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameInfo'
    post:
      summary: Create a new game
      description: |
        To start playing:
        1. Create a game
        2. Add players
        3. Start the game
      operationId: createNewGame
      tags:
        - games
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGameRequest'
      responses:
        201:
          description: Game created
          content:
            application/json:
              schema:
                sessionId:
                  type: string
        409:
          description: Game already exists with that name

  /games/{sessionId}/:
    post:
      summary: Start a game
      operationId: startGame
      tags:
        - games
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        200:
          description: Game was started
        404:
          description: Game could not be found
        409:
          description: Game was already started
    delete:
      summary: Stop a game
      operationId: stopGame
      tags:
        - games
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        204:
          description: Game was stopped
        404:
          description: Game could not be found in order to stop it
  /games/{sessionId}/players:
    get:
      summary: Get all players in a game
      operationId: getAllPlayersInGame
      tags:
        - players
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        200:
          description: An array of all players in the session
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
    post:
      summary: Add a player to a game
      operationId: addPlayerToGame
      tags:
        - players
      parameters:
        - $ref: '#/components/parameters/sessionId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        201:
          description: "Player was added successfully"
        400:
          description: "Player could not be added"
#  /moves/{sessionId}:
#    get:
#      summary: get the latest moves you have to animate
#      description: returns empty array if too much time has passed
#      tags:
#        - moves
#      parameters:
#        - $ref: '#/components/parameters/sessionId'
  /moves/{sessionId}/{playerId}:
    post:
      summary: make a move for a player
      operationId: makeMove
      tags:
        - moves
      parameters:
        - $ref: '#/components/parameters/sessionId'
        - $ref: '#/components/parameters/playerId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveRequest'
      responses:
        200:
          description: Move is allowed
          content:
            appplication/json:
              schema:
                $ref: '#/components/schemas/MoveResponse'
        400:
          description: Move is not allowed

  /moves/{sessionId}/{playerId}/test:
    post:
      summary: check if a move for a player is possible
      operationId: checkMove
      tags:
        - moves
      parameters:
        - $ref: '#/components/parameters/sessionId'
        - $ref: '#/components/parameters/playerId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoveRequest'
      responses:
        200:
          description: Move is allowed
          content:
            appplication/json:
              schema:
                $ref: '#/components/schemas/TestMoveResponse'
        400:
          description: Move is not allowed
  /cards/{sessionId}:
    get:
      summary: Get all card info that is publicly available
      operationId: getPubliclyAvailableCardInformation
      description: >
        - Number of cards already played (for displaying the played cards stack)
        - Number of cards each player has left
      tags:
        - cards
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        200:
          description: get all cards info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        404:
          description: not found

  /cards/{sessionId}/{playerId}:
    get:
      summary: Get cards for a specific player
      operationId: getPlayerCards
      parameters:
        - $ref: '#/components/parameters/sessionId'
        - $ref: '#/components/parameters/playerId'
      tags:
        - cards
      responses:
        200:
          description: List of cards for the player
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'

    delete:
      summary: Player forfeits cards
      operationId: playerForfeits
      parameters:
        - $ref: '#/components/parameters/sessionId'
        - $ref: '#/components/parameters/playerId'
      tags:
        - moves
      responses:
        200:
          description: player forfeited successfully
        400:
          description: player could not forfeit
  /gamestates/{sessionId}:
    get:
      summary: Get gamestate of a specific game
      operationId: getGameStateForGame
      tags:
        - gamestates
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        200:
          description: Gamestate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameState'
        404:
          description: Game not found

  /games/{sessionId}:
    get:
      summary: Get details of a specific game
      parameters:
        - $ref: '#/components/parameters/sessionId'
      responses:
        200:
          description: Game details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameInfo'
        404:
          description: Game not found
components:
  parameters:
    sessionId:
      name: sessionId
      in: path
      required: true
      schema:
        type: string
    playerId:
      name: playerId
      in: path
      required: true
      schema:
        type: string
  schemas:
    RequestType:
      enum:
        - CHECK_MOVE
        - MAKE_MOVE
    MoveType:
      enum:
        - switch
        - onBoard
        - move
        - split
    GameInfo:
      type: object
      required:
        - id
        - roomName
        - nrPlayers
        - maxNrPlayers
        - status
      properties:
        id:
          type: string
        roomName:
          type: string
        nrPlayers:
          type: integer
        maxNrPlayers:
          type: integer
        status:
          type: string
          enum:
            - waiting
            - inProgress
    PawnId:
      type: object
      required:
        - playerId
        - pawnNr
      properties:
        playerId:
          type: string
        pawnNr:
          type: integer

    PositionKey:
      type: object
      required:
        - playerId
        - tileNr
      properties:
        playerId:
          type: string
        tileNr:
          type: integer

    Pawn:
      type: object
      required:
        - playerId
        - pawnId
        - currentTileId
        - nestTileId
      properties:
        playerId:
          type: string
        pawnId:
          $ref: '#/components/schemas/PawnId'
        currentTileId:
          $ref: '#/components/schemas/PositionKey'
        nestTileId:
          $ref: '#/components/schemas/PositionKey'
        uri:
          type: string

    Player:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
        name:
          type: string
        profilePic:
          type: string
        color:
          type: string
        isActive:
          type: boolean
        isPlaying:
          type: boolean
        place:
          description: standard value -1, if they won they are either 1st 2nd 3rd
          type: integer

    GameState:
      type: object
      required:
        - currentPlayerId
        - pawns
        - players
        - winners
      properties:
        currentPlayerId:
          type: string
        pawns:
          type: array
          items:
            $ref: '#/components/schemas/Pawn'
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        winners:
          type: array
          items:
            $ref: '#/components/schemas/Player'

    NewGameRequest:
      type: object
      properties:
        roomName:
          type: string
          min: 3
          max: 50
        maxPlayers:
          type: integer
          min: 2
          max: 8
        playerId:
          type: string

    MoveRequest:
      type: object
      required:
        - playerId
        - moveType
      properties:
        playerId:
          type: string
        card:
          $ref: '#/components/schemas/Card'
        pawn1:
          $ref: '#/components/schemas/Pawn'
        pawn2:
          $ref: '#/components/schemas/Pawn'
        moveType:
          $ref: '#/components/schemas/MoveType'
        stepsPawn1:
          type: integer
        stepsPawn2:
          type: integer
    Card:
      required:
        - suit
        - value
        - uuid
      properties:
        suit:
          description: |
            there is 1 suite per player
            with a maximum of 4 suites (0,1,2,3)
          type: integer
          min: 0
          max: 3
        value:
          description: the face value of the card 1 = ace, ... , 12 = king
          type: integer
        uuid:
          description: |
            a unique tracking number to distinguish between two identical cards (Ace♠︎),
            this happens when you have more than 4 players.
          type: integer
    MoveResult:
      enum:
        - CAN_MAKE_MOVE
        - CANNOT_MAKE_MOVE
        - PLAYER_DOES_NOT_HAVE_CARD
        - INVALID_SELECTION
    MoveSet:
      type: array
      items:
        $ref: '#/components/schemas/PositionKey'
    TestMoveResponse:
      type: object
      description:
        only returns PositionKeys you need to highlight for possible moves
      properties:
        tiles:
          $ref: '#/components/schemas/MoveSet'
    MoveResponse:
      type: object
      description:
        when you use 7 you could kill 2 opponents at the same time
      properties:
        # pawns
        pawn1:
          $ref: '#/components/schemas/Pawn'
        pawn2:
          $ref: '#/components/schemas/Pawn'
        pawnKilledByPawn1:
          $ref: '#/components/schemas/Pawn'
        pawnKilledByPawn2:
          $ref: '#/components/schemas/Pawn'
        # move sets
        movePawn1:
          $ref: '#/components/schemas/MoveSet'
        movePawn2:
          $ref: '#/components/schemas/MoveSet'
        movePawnKilledByPawn1:
          $ref: '#/components/schemas/MoveSet'
        movePawnKilledByPawn2:
          $ref: '#/components/schemas/MoveSet'
        # move type
        moveType:
          $ref: '#/components/schemas/MoveType'
        result:
          $ref: '#/components/schemas/MoveResult'

    CardResponse:
      type: object
      properties:
        playedCards:
          type: array
          items:
            type: string
        nrOfCardsPerPlayer:
          type: object
          additionalProperties: #for a flexible key value mapping
            type: integer
