openapi: 3.1.0
info:
  title: Keezen Game API
  version: 1.0.0
  description: |
    OpenApi definition for the Keezen board game.
    This API manages players, games, moves, and cards.

servers:
  - url: http://localhost:4200
    description: Local development server

paths:
  /test:
    get:
      summary: Simple test for openAPI
      responses:
        200:
          description: get a number
          content:
            application/json:
              schema:
                type: integer
                example: 7
  /games:
    get:
      summary: List all active games
      responses:
        '200':
          description: A list of games
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameInfo'
    post:
      summary: Create a new game
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGameRequest'
      responses:
        201:
          description: Game created
          content:
            application/json:
              schema:
                sessionId:
                  type: string
        409:
          description: Game already exists with that name

  /games/{sessionId}/players:
    get:
      summary: Get all players in a game
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: An array of all players in the session
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
    post:
      summary: Add a player to a game
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        201:
          description: "Player was added successfully"
        400:
          description: "Player could not be added"


  /cards/{gameId}/{playerId}:
    get:
      summary: Get cards for a specific player
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
        - name: playerId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of cards for the player
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Card'

  /gamestates/{gameId}:
    get:
      summary: Get gamestate of a specific game
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Gamestate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameState'
        404:
          description: Game not found

  /games/{gameId}:
    get:
      summary: Get details of a specific game
      parameters:
        - name: gameId
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: Game details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameInfo'
        404:
          description: Game not found
#  /games/{gameId}/players:
#    post:
#      parameters:
#        - name: gameId
#          in: path
#          required: true
#          schema:
#            type: string
#      summary: Add a player to a game
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Player'




components:
  schemas:
    GameInfo:
      type: object
      properties:
        id:
          type: string
        roomName:
          type: string
        players:
          type: array
          items:
            $ref: '#/components/schemas/Player'
        maxNrPlayers:
          type: integer
        status:
          type: string
          enum:
            - waiting
            - inProgress

    Pawn:
      type: object
      properties:
        playerId:
          type: string
        pawnId:
          type: string
        positionId:
          type: object
          playerId:
            type: string
          tileNr:
            type: integer

    Player:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        name:
          type: string
        profilePic:
          type: string
        color:
          type: string
        isActive:
          type: boolean
        isPlaying:
          type: boolean
        place:
          description: standard value -1, if they won they are either 1st 2nd 3rd
          type: integer

    GameState:
      type: object
      properties:
        currentPlayerId:
          type: string
        pawns:
          type: array
          items:
            type: object
            properties:
              schema:
                $ref: '#/components/schemas/Pawn'
        players:
          type: array
          items:
            properties:
              schema:
                $ref: '#/components/schemas/Player'
        winners:
          type: array
          items:
            properties:
              schema:
                $ref: '#/components/schemas/Player'
        board:
          type: array
          items:
            type: string

    NewGameRequest:
      type: object
      properties:
        roomName:
          type: string
          min: 3
          max: 50
        maxPlayers:
          type: integer
        playerId:
          type: string

    MoveRequest:
      type: object
      properties:
        playerId:
          type: string
        card:
          type: string
        pawnId1:
          type: string
        pawnId2:
          type: string
        moveType:
          type: string
          enum:
            - switch
            - onBoard
            - move
            - forfeit
    Card:
      properties:
        suit:
          description: |
            there is 1 suite per player
            with a maximum of 4 suites (0,1,2,3)
          type: integer
          min: 0
          max: 3
        value:
          description: the face value of the card 1 = ace, ... , 12 = king
          type: integer
        uuid:
          description: |
            a unique tracking number to distinguish between two identical cards (Ace♠︎),
            this happens when you have more than 4 players.
          type: integer

    CardResponse:
      type: object
      properties:
        cards:
          type: array
          items:
            type: object
            properties:
              schema:
                $ref: '#/components/schemas/Card'
        playedCards:
          type: array
          items:
            type: string
        nrOfCardsPerPlayer:
          type: array
          items:
            type: integer
